name: my cicd

on:
  # push:
  #   branches:
  #     - main
  pull_request:
    branches:
      - main 
  workflow_dispatch:

permissions:
  contents: read
  id-token: 'write'
    
jobs:
  build:
    runs-on: 
      - ubuntu-latest
    steps:
      - name: Get the code
        uses: actions/checkout@v3
      - name: actions/setup-java
        uses: actions/setup-java@v3
        with: 
          java-version: '17'
          distribution: 'temurin'
          cache:  maven

      # - name: Build maven
      #   run: mvn -B package --file pom.xml

      # - name: Uploading artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: BoardGame
      #     path: target/*.jar
      # -  name: Upload artifact to Nexus
      #    env:
      #      NEXUS_URL: ${{ secrets.NEXUS_URL }}
      #      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      #      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      #    run: |
      #      curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file target/*.jar $NEXUS_URL/repository/Raw-File/

      # - name: Trivy FS scan
      #   uses: aquasecurity/trivy-action@0.20.0
      #   with:
      #     scan-type: 'fs'
      #     scan-ref: '.'
      #     format: table
      #     output: 'trivy-fs-report.html'
      
      # - name: Sonar scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      
      # - name: Sonar Quality Gate 
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes:  5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2

      # - name: Set up build docker build
      #   uses: docker/setup-buildx-action@v2

      # - name: login to the docker hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWD }}

      # - name: Get PR HEAD Commit SHA
      #   run: echo "HEAD Commit SHA:${{ github.event.pull_request.head.sha }}"
      
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     push: true
      #     # tags: shashank30mishra/boardgame:latest
      #     tags: shashank30mishra/boardgame:${{ github.event.pull_request.head.sha }}

      # - name: Trivy Image scan
      #   uses: aquasecurity/trivy-action@0.20.0
      #   with:
      #     image-ref: 'shashank30mishra/boardgame:latest'
      #     format: table
      #     output: 'trivy-image-report.html'
      #   env:
      #     TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWD }}
      
      # - name: Upload Trivy scan results to Nexus
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: trivy-fs-report
      #     path: '${{ github.workspace }}/trivy-*-report.html'
      #     retention-days: 2

      # -  name: Upload artifact to Nexus
      #    env:
      #      NEXUS_URL: ${{ secrets.NEXUS_URL }}
      #      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      #      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      #    run: |
      #      curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file trivy-fs-report.html $NEXUS_URL/repository/Raw-File/trivy-fs-report.html
      #      curl -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file trivy-image-report.html $NEXUS_URL/repository/Raw-File/trivy-image-report.html

  # deploy:
  #   needs: build
  #   runs-on: self-hosted

  #   steps:
  #     - name: Get the code
  #       uses: actions/checkout@v3
        
  #     - name: Kubectl Action
  #       uses: tale/kubectl-action@v1
  #       with:
  #         base64-kube-config: ${{ secrets.KUBE_CONFIG }}
  #     - run: |
  #           kubectl apply -f deployment-service.yaml -n webapps
  #           kubectl get svc -n webapps
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Authenticating gcloud
        uses: google-github-actions/auth@v2.0.0  
        with:
          workload_identity_provider: 'projects/1022147963538/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'gh-action@sre-learn-451016.iam.gserviceaccount.com'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: 'Setting up kubectl and auth plugin'
        run: |
           gcloud components install kubectl
           gcloud components install gke-gcloud-auth-plugin
           echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: 'Setting up kubectl and auth plugin'
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} --region ${{ secrets.GKE_REGION }} --project ${{ secrets.GCP_PROJECT }}
          kubectl get pods -A
